pairs(iris[1:4],
main = "Anderson's Iris Data -- 3 species",
pch = 21,
bg = c("red", "green3", "blue")[unclass(iris$Species)])
# pch가 바뀔 때마다 다른 종류의 점으로 찍힘
unclass(iris$Species) # <- unclass: factor->integer vector로 변환환
iris$Species
library(ggplot2)
iris_plot<-ggplot(data=iris,
aes(x=Petal.Length,
y=Petal.Width,
colour=Species))+
geom_point(shape=19,size=4)
iris_plot2<-iris_plot+
annotate("text",x=1.5,y=0.7,label='Setosa')+
annotate("text",x=3.5,y=1.5,label='Veriscolour')+
annotate("text",x=6,y=2.7,label='Virginica')
iris_plot2+
annotate("rect",xmin=0,xmax=2.6,ymin=0,ymax=0.8,
alpha=0.4,fill="red")+   #alpha:불투명도
annotate("rect",xmin=2.6,xmax=4.9,ymin=0.8,ymax=1.5,
alpha=0.4,fill="green")+
annotate("rect",xmin=4.8,xmax=7.2,ymin=1.5,ymax=2.7,
alpha=0.4,fill="blue")
iris_kmeans <- kmeans(iris[,c('Petal.Length','Petal.Width')],3)
iris_kmeans
iris_kmeans <- kmeans(iris[,c('Petal.Length','Petal.Width')],3)
iris_kmeans
#개념:ggplot2패키지의 geom_point():변수 1개의 산점도 그리기
#corrplot패키지: 상관계수 행렬 그리기
str(airquality)
#개념:ggplot2패키지의 geom_point():변수 1개의 산점도 그리기
#corrplot패키지: 상관계수 행렬 그리기
airquality
colSums(is.na(airquality_1))    # <- 한번에 NA 확인할 때
sum(is.na(airquality_1$Ozone))  # <- 따로 NA확인할 때
cor(airquality_1)   # <- NA가 있어서 상관계수에 NA가 생김(처리)
# 결측값있는 행을 제거해보기
airquality_2<-na.omit(airquality_1)
str(airquality_2)
colSums(is.na(airquality_2)) #<- 결측값없는지 확인해보기
#pairs에 밑에 있는 코드 그대로 긁어서
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(USJudgeRatings, lower.panel = panel.smooth, upper.panel = panel.cor,
gap=0, row1attop=FALSE)
names(iris_kmeans)
iris_kmeans$size
# panel.lm은 없으니 직접 치기
panel.lm<-function(x,y,col=par("col"),bg=NA,
pch=par("pch"),
cex=1,col.smooth="black",...){
points(x,y,pch=,col=col,
bg=bg,cex=cex)   #points는 점에관해
abline(stats::lm(y~x),
col=col.smooth,...)
}
# pairs의 example : iris
pairs(iris[1:4],
main = "Anderson's Iris Data -- 3 species",
pch = 21,
bg = c("red", "green3", "blue")[unclass(iris$Species)])
table(iris_kmeans$cluster)
###################################################################
############## 의사결정 트리
# 엔트로피 (복잡도) :
#
curve(-x*log2(x)-(1-x)log2(l-x),
col = 'red', xlab='x', ylab = 'entropy', lwd=4)
###################################################################
############## 의사결정 트리
# 엔트로피 (복잡도) :
#
curve(-x*log2(x)-(1-x)log2(l-x),
col = 'red', xlab='x', ylab = 'entropy', lwd=4)
###################################################################
############## 의사결정 트리
# 엔트로피 (복잡도) :
#
curve(-x*log2(x)-(1-x)*log2(l-x),
col = 'red', xlab='x', ylab = 'entropy', lwd=4)
###################################################################
############## 의사결정 트리
# 엔트로피 (복잡도) :
#
curve(-x*log2(x)-(1-x)*log2(1-x),
col = 'red', xlab='x', ylab = 'entropy', lwd=4)
-(9/14)*log2((9/14))-(1-(9/14))*log2(1-(9/14))
-(5/14)*log2((9/14))-(1-(9/14))*log2(1-(9/14))
-(5/14)*log2((5/14))-(1-(5/14))*log2(1-(5/14))  # 0.75
9/14
x=(9/14)
-x*log2(x)-(1-x)*log2(1-x)
EB <- -x*log2(x)-(1-x)*log2(1-x)  # 0.94
x=(3/5)
-x*log2(x)-(1-x)*log2(1-x)
EA <- -x*log2(x)-(1-x)*log2(1-x)  # 0.97
EB-EA
-x*log2(x)-(1-x)*log2(1-x)  # 0.94
read.csv('dataset_for_ml/credit.csv')
credit <- read.csv('dataset_for_ml/credit.csv')
str(credit)
summary(credit)
credit <- read.csv('dataset_for_ml/credit.csv')
table(credit$default)
x=(7/10)
-x*log2(x)-(1-x)*log2(1-x)
set.seed(123)
train_sample <- sample(1000,900)
str(train_sample)
credit[train_sample]
credit[train_sample,]
credit_train <- credit[train_sample,]
credit[-train_sample,]
credit_test <- credit[-train_sample,]
str(credit_test)
table(credit_train$default)
table(credit_test$default)
prop.table(table(credit_test$default))
prop.table(table(credit_train$default))
# 의사결정트리
install.packages('c50')
# 의사결정트리
install.packages('C50')
library(C50)
credit_train[-'default']
credit_train[-default]
credit_train-['default']
credit_model <- C5.0(credit_train[-17] ,credit_train$default )
names(credit_train)
credit_model
summary(credit_model)
table(credit_train$default)
table(credit_test$default)
predict(credit_model, credit_test[-17])
credit_pred <- predict(credit_model, credit_test[-17])
crossTable(credit_pred, credit_test[17])
credit_test[17]
crossTable(credit_test[17], credit_pred)
library(gmodels)
crossTable(credit_test[17], credit_pred)
CrossTable(credit_test[17], credit_pred)
CrossTable(credit_test[17], credit_pred)
credit_test[17]
credit_pred
CrossTable(credit_test$default, credit_pred)
credit_test$default
CrossTable(credit_test$default, credit_pred,
prop.c = F, prop.r = F)
CrossTable(credit_test$default, credit_pred,
prop.c = F, prop.r = F, dnn = c('actual','predicted'))
<- read.csv('dataset_for_ml/mushroom.csv')
read.csv('dataset_for_ml/mushroom.csv')
read.csv('dataset_for_ml/mushrooms.csv')
mushrooms <- read.csv('dataset_for_ml/mushrooms.csv')
str(mushrooms)
C5.0(credit_train[-17], credit_train$default, trials = 10)
# 부스팅 : 의사결정 트리를 여러개 작성하고 나온 결과에 대해 투표
#         ( 성능이 약한 모델을 모아서 성능 개선 )
#                                             트리의 개수 (best. 10개)
credit_boost10 <- C5.0(credit_train[-17], credit_train$default, trials = 10)
credit_boost10
summary(credit_boost10)
predict(credit_boost10, credit_test[-17])
credit_boost_pred10 <- predict(credit_boost10, credit_test[-17])
CrossTable(credit_test$default, credit_boost_pred10)
CrossTable(credit_test$default, credit_pred,
prop.c = F, prop.r = F, dnn = c('actual','predicted'))
CrossTable(credit_test$default, credit_boost_pred10,
prop.c = F, prop.r = F, dnn = c('actual','predicted'))
# 테스트와 트레인 데이터 나누기
set.seed(1004)
train_sample <- sample(1000,900)
credit_train <- credit[train_sample,]  # 900건
credit_test <- credit[-train_sample,]  # 100건
table(credit_train$default)  # 635 265
table(credit_test$default)   # 65  35
credit_model <- C5.0(credit_train[-17] ,credit_train$default )
credit_pred <- predict(credit_model, credit_test[-17])
CrossTable(credit_test$default, credit_pred,
prop.c = F, prop.r = F, dnn = c('actual','predicted'))
CrossTable(credit_test$default, credit_pred,
prop.c = F, prop.r = F, dnn = c('actual','predicted'))
# 부스팅 : 의사결정 트리를 여러개 작성하고 나온 결과에 대해 투표
#         ( 성능이 약한 모델을 모아서 성능 개선 )
#                                             트리의 개수 (best. 10개)
credit_boost10 <- C5.0(credit_train[-17], credit_train$default, trials = 10)
credit_boost_pred10 <- predict(credit_boost10, credit_test[-17])
CrossTable(credit_test$default, credit_boost_pred10,
prop.c = F, prop.r = F, dnn = c('actual','predicted'))
summary(credit_model)
summary(credit_boost10)
read.csv('titanic/train.csv')
###########################################################################
########################### 타이타닉 분석 ##
train <- read.csv('titanic/train.csv')
train
str(train)
test <- read.csv('titanic/test.csv')
str(test)
install.packages('readr')
library(readr)
install.packages('rpart')
install.packages("rpart")
library(rpart)
install.packages('rpart.plot')
library(rpart.plot)
bind_rows(train,test)
library(dplyr)
llibrary(ggplot)
library(ggplot)
library(ggplot2)
bind_rows(train,test)
str(bind_rows(train,test))
dim(bind_rows(train,test))
Survived <- train$Survived
train$Survived <- NULL
dim(bind_rows(train,test))
Survived
dim(bind_rows(train,test))
dataset <- dim(bind_rows(train,test))
warning()
warning(dim(bind_rows(train,test)))
str(dataset)
dataset <- dim(bind_rows(train,test))
str(dataset)
dataset <- bind_rows(train,test)
str(dataset)
summary(dataset)
dataset$Fare
type(dataset$Fare)
class(dataset$Fare)
dataset[17]
dataset[7]
class(dataset[7])
class(dataset[[7]])
is.na(dataset$Fare)
is.na(dataset)
dataset[is.na(dataset)]
is.na(dataset)
is.na(dataset[,:])
is.na(dataset[:,:])
is.na(dataset[:])
is.na(dataset[,])
is.na(dataset[])
is.na(dataset[,Age])
is.na(dataset[,'Age'])
dataset[is.na(dataset[,'Age'])]
dataset[is.na(dataset[,'Age']),]
is.na(dataset$PassengerId)
is.na(dataset$PassengerId) == T
dataset$PassengerId[is.na(dataset$PassengerId) == T]
dataset$PassengerId[is.na(dataset$Age) == T]
dataset$PassengerId[is.na(dataset$Age)]
# dataset의 fare 에 NA가 있는가 ?
dataset$PassengerId[is.na(dataset$Fare) == T]
dataset$PassengerId['1044']
dataset$PassengerId['1044',]
# fare의 NA값을 중앙값으로 대체
median(dataset$Fare)
# fare의 NA값을 중앙값으로 대체
median(dataset$Fare, na.rm = T)
dataset$PassengerId==1044
dataset$Fare[dataset$PassengerId==1044]
# fare의 NA값을 중앙값으로 대체
dataset$Fare[dataset$PassengerId==1044] <- median(dataset$Fare, na.rm = T)  # 14.45
dataset$Fare[dataset$PassengerId==1044]
# dataset의 fare 에 NA가 있는가 ?
dataset$PassengerId[is.na(dataset$Fare) == T]  # 1044
table(dataset)
summary(dataset$Age)
ifelse(is.na(x), median(dataset$Age, na.rm = T) , x)
sapply(dataset$Age, FUN = function(x){
ifelse(is.na(x), median(dataset$Age, na.rm = T) , x)
})
median(dataset$Age, na.rm = T)
dataset$Age <- sapply(dataset$Age, FUN = function(x){
ifelse(is.na(x), median(dataset$Age, na.rm = T) , x)
})
# sapply 를 이용해 age의 NA값 대체
summary(dataset$Age)  # NA : 263개
table(dataset$Embarked)
sum(dataset$Embarked != '')
table(dataset$Embarked)/sum(dataset$Embarked != '')
dataset$Embarked==''
dataset$PassengerId[dataset$Embarked=='']
dataset$Embarked[c('62','830')]
dataset$Embarked[c(62,830)]
dataset$Embarked[c(62,830)] <- 'S'
dataset$Embarked[c(62,830)]
# row의 행의 개수
nrow(dataset)
dim(dataset)
dataset$Cabin != ''
sum(dataset$Cabin != '')
sum(dataset$Cabin != '')  # 295
sum(dataset$Cabin != '') / nrow(datas)
sum(dataset$Cabin != '') / nrow(dataset)
dataset$Cabin
dataset$Cabin[1]
substr(dataset$Cabin)
substr(dataset$Cabin, 1, 1)
#           첫번째 글자부터 한 글자 추출
dataset$Cabin <- substr(dataset$Cabin, 1, 1)
dataset$Cabin
table(dataset$Cabin)
dataset$Cabin == ''
dataset$Cabin[dataset$Cabin == '']
dataset$Cabin[dataset$Cabin == ''] <- 'H'
dataset$Cabin
table(dataset$Cabin)
str(dataset)
summary(dataset)
str(dataset)
# PassengerId, Pclass, Sex, Embarked, Cabin 를 팩터로
as.factor(c('PassengerId', 'Pclass', 'Sex', 'Embarked', 'Cabin'))
str(dataset)
# PassengerId, Pclass, Sex, Embarked, Cabin 를 팩터로
factor_vars <- c('PassengerId', 'Pclass', 'Sex', 'Embarked', 'Cabin')
dataset[factor_vars]
as.factor(dataset[factor_vars])
str(dataset)
dataset[factor_vars] <- lapply(dataset[factor_vars], FUN = function(x){
as.factor(x)
})
str(dataset)
dataset[1:891,]
train_cleaned <- dataset[1:891,]
test_cleaned <- dataset[892:1309,]
Survived
train_cleaned$Survived <- Survived
?rpart
names(train_cleaned)
DT <- rpart(Survived ~ Pclass + Sex + Embarked + Cabin, train_cleaned, method = 'class')
summary(DT)
predict_dt <- predict(DT, test_cleaned, type = 'class')
predict_dt
data.frame(predict_dt)
data.frame(PassengerID = test_cleaned$PassengerId, Survived = predict_dt)
res <- data.frame(PassengerID = test_cleaned$PassengerId, Survived = predict_dt)
write.csv(res, file = 'result.csv', row.names = F)
str(mushrooms)
str(mushrooms)
str(mushrooms)
dim(mushrooms)
# NA 확인
is.na(mushrooms)
# NA 확인
sum(is.na(mushrooms))
# train, test 나누기
set.seed(1004)
8127/7
8127/10 * 7
8127*0.7
sample(8124, 5689)
sample_rows <- sample(8124, 5689)
mushrooms[sample_rows,]
mushrooms_train <- mushrooms[sample_rows,]
mushrooms_test <- mushrooms[-sample_rows,]
# 1. C5.0을 이용한 DT
mushrooms_train[-1]
C5.0(mushrooms_train[-1],mushrooms_train[1])
# 1. C5.0을 이용한 DT
library(C50)
C5.0(mushrooms_train[-1],mushrooms_train[1])
C5.0(mushrooms_train[-1],mushrooms_train$type)
model_C50 <- C5.0(mushrooms_train[-1],mushrooms_train$type)
summary(model_C50)
predict(model_C50,mushrooms_test[-1])
model_C50 <- C5.0(mushrooms_train[-1],mushrooms_train$type)
predict(model_C50, mushrooms_test[-1])
mushrooms_train_label <- mushrooms_train[1]
mushrooms_test_label <- mushrooms_test[1]
mushrooms_test_label
str(mushrooms)
mushrooms_train_label <- mushrooms_train[1]
mushrooms_test_label <- mushrooms_test[1]
mushrooms_train <- mushrooms_train[-1]
mushrooms_test <- mushrooms_test[-1]
model_C50 <- C5.0(mushrooms_train, mushrooms_train_label)
mushrooms_train_label
model_C50 <- C5.0(mushrooms_train, mushrooms_train_label$type)
predict(model_C50, mushrooms_test)
predict(model_C50, mushrooms_test)
summary(credit_model)
credit_train[-17]
credit_train$default
summary(model_C50)
mushrooms_train
mushrooms_train_label$type
model_C50 <- C5.0(mushrooms_train, mushrooms_train_label$type)
summary(model_C50)
model_C50 <- C5.0(mushrooms_train, mushrooms_train_label$type, trials = 10)
summary(model_C50)
credit_model <- C5.0(credit_train[-17] ,credit_train$default )
credit_model
credit_train[-17]
credit_train$default
credit_train[-17]
mushrooms_train_label$type
model_C50 <- C5.0(mushrooms_train, mushrooms_train_label$type, trials = 10)
model_C50 <- C5.0(mushrooms_train[], mushrooms_train_label$type, trials = 10)
model_C50 <- C5.0(mushrooms_train[,], mushrooms_train_label$type, trials = 10)
mushrooms
mushrooms == ''
sum(mushrooms == '')
model_C50 <- C5.0(mushrooms_train, mushrooms_train_label$type)
mushrooms <- read.csv('dataset_for_ml/mushrooms.csv')
sample_rows <- sample(8124, 5689)
mushrooms_train <- mushrooms[sample_rows,]  # 5689
mushrooms_test <- mushrooms[-sample_rows,]  # 2435
model_C50 <- C5.0(mushrooms_train[,-1], mushrooms_train$type)
summary(model_C50)
mushrooms$veil_type
table(mushrooms$veil_type)
table(mushrooms)
summary(mushrooms)
# veil_type이 모두 partial이므로 제거
names(mushrooms)
mushrooms <- mushrooms[-17]
mushrooms <- read.csv('dataset_for_ml/mushrooms.csv')
mushrooms <- mushrooms[-17]
sample_rows <- sample(8124, 5689)
mushrooms_train <- mushrooms[sample_rows,]  # 5689
mushrooms_test <- mushrooms[-sample_rows,]  # 2435
model_C50 <- C5.0(mushrooms_train[,-1], mushrooms_train$type)
summary(model_C50)
mushrooms_train <- mushrooms_train[-1]
mushrooms_test <- mushrooms_test[-1]
mushrooms_train_label <- mushrooms_train[1]
mushrooms_test_label <- mushrooms_test[1]
model_C50 <- C5.0(mushrooms_train, mushrooms_train_label$type)
model_C50 <- C5.0(mushrooms_train[], mushrooms_train_label$type)
model_C50 <- C5.0(mushrooms_train[,], mushrooms_train_label$type)
model_C50 <- C5.0(mushrooms_train[-1], mushrooms_train_label$type)
mushrooms_train_label
mushrooms_train <- mushrooms[sample_rows,]  # 5689
mushrooms_test <- mushrooms[-sample_rows,]  # 2435
mushrooms_train
model_C50 <- C5.0(mushrooms_train[,-1], mushrooms_train$type)
summary(model_C50)
model_C50
predict(model_C50, mushrooms_test[,-1])
mushrooms_test_pred <- predict(model_C50, mushrooms_test[,-1])
# label 데이터
mushrooms_test_label <- mushrooms_test$type
mushrooms_test_pred <- predict(model_C50, mushrooms_test[,-1])
CrossTable(mushrooms_test_label,mushrooms_test_pred)
library(arules)
CrossTable(mushrooms_test_label,mushrooms_test_pred)
CrossTable(mushrooms_test_label,mushrooms_test_pred)
library(arules)
CrossTable(mushrooms_test_label,mushrooms_test_pred)
?crossTable
mushrooms_test_label
mushrooms_test_pred
CrossTable(mushrooms_test_label, mushrooms_test_pred)
CrossTable(mushrooms_test_label, mushrooms_test_pred)
crossTable(mushrooms_test_label, mushrooms_test_pred)
library(arules)
crossTable(mushrooms_test_label, mushrooms_test_pred)
library(gmodels)
CrossTable(mushrooms_test_label, mushrooms_test_pred)
test_cleaned
train_cleaned
test_cleaned
library(rpart)
names(mushrooms_train)
rpart(type~ cap_shape+cap_surface+cap_color+bruises+odor+gill_attachment+gill_spacing+
+gill_size+gill_color+stalk_shape+stalk_root+stalk_surface_above_ring+stalk_root+
+stalk_surface_below_ring+stalk_color_above_ring+stalk_color_below_ring+veil_color+
+ring_number+ring_type+spore_print_color+population+habitat, mushrooms_train, method = 'class')
mushrooms_DT <- rpart(type~ cap_shape+cap_surface+cap_color+bruises+odor+gill_attachment+gill_spacing+
+gill_size+gill_color+stalk_shape+stalk_root+stalk_surface_above_ring+stalk_root+
+stalk_surface_below_ring+stalk_color_above_ring+stalk_color_below_ring+veil_color+
+ring_number+ring_type+spore_print_color+population+habitat, mushrooms_train, method = 'class')
mushrooms_DT
predict(mushrooms_DT, mushrooms_test_label)
predict(mushrooms_DT, mushrooms_test_label, method = 'class')
predict(mushrooms_DT, mushrooms_test_label, type = 'class')
predict(mushrooms_DT, mushrooms_test_label, type = 'class')
mushrooms$cap_shape
mushrooms_DT <- rpart(type~cap_shape+cap_surface+cap_color+bruises+odor+gill_attachment+gill_spacing+
+gill_size+gill_color+stalk_shape+stalk_root+stalk_surface_above_ring+stalk_root+
+stalk_surface_below_ring+stalk_color_above_ring+stalk_color_below_ring+veil_color+
+ring_number+ring_type+spore_print_color+population+habitat, mushrooms_train, method = 'class')
mushrooms_DT
predict(mushrooms_DT, mushrooms_test_label, type = 'class')
mushrooms_train$cap_shape
train_cleaned
summary(DT)
summary(mushrooms_DT)
predict(mushrooms_DT, mushrooms_test_label, type = 'class')
mushrooms_DT <- rpart(type ~ cap_shape+cap_surface+cap_color+bruises+odor+gill_attachment+gill_spacing+
+gill_size+gill_color+stalk_shape+stalk_root+stalk_surface_above_ring+stalk_root+
+stalk_surface_below_ring+stalk_color_above_ring+stalk_color_below_ring+veil_color+
+ring_number+ring_type+spore_print_color+population+habitat, mushrooms_train, method = 'class')
summary(mushrooms_DT)
predict(mushrooms_DT, mushrooms_test_label, type = 'class')
mushrooms_test_label
predict(mushrooms_DT, mushrooms_test, type = 'class')
mushrooms_test_pred_rpart <- predict(mushrooms_DT, mushrooms_test, type = 'class')
CrossTable(mushrooms_test_label, mushrooms_test_pred_rpart)
CrossTable(mushrooms_test_label, mushrooms_test_pred)  # 100%
